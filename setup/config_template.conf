## Movie Lister Configuration File ##

##Placement of the movies should be somewhere under the web root where the website can see them, I would just hardlink to moviePlacement from there:
moviePlacement = {pathToMovies}
##The five placements listed here under are folders under the web root, where the first one is a hardlink to moviePlacement:
urlMoviePlacement = movieLister/symlinks/{symlinkToPathToMovies}
urlImagePlacement = movieLister/images/
coverCachePlacement = movieLister/coverCache/
styleSheetPlacement = movieLister/css/
javaScriptPlacement = movieLister/js/
listHeading = {list_Heading}
##We need a username and password to connect to the database*:
dbUser = {db_User}
dbPassword = {db_Password}
currentMoviesPerPage = 27
##Set to 0 if the moviename starts at the first character in the folder name:
movieNameOffset = 0
##When do you want the script to xcheck for ratings again? Every 7 days:
updateInterval = 7
##Initial table size; small, medium or big
tableType = medium
##Will we use samba? - on / off
sambaUsage = off
##How many recomendations do we want from tastekidlist.com into database when loaded?
numberOfRecomendations = 4
##How many movies are we going to load into db before we start to read from DB instead of disk?
numberOfMoviesBeforeDBTakeOver = 1
##What string in the youtube webpage determines if the video is embedable?
youtubeEmbedString = "allow_embed": 1"
##What string in the tastekid.com webpage determines the web page line that contains the recommendations?
tastekidString = <meta name="keywords" content="
##Do we want the script to never embed embedable youtube movies that it finds?
neverEmbed = 1
##To use the tastekid.com API you need to register an account with them and recive a username and password*:
tasteKidF = {tasteKidF}
tasteKidK = {tasteKidK}
##Here you can decide to always use the API or not. If you set to 0, movieLister will try to crawl tastelist.com webpages first.
forcedTasteKidAPI = 0
